[{"C:\\Users\\dzhan\\Desktop\\Coding_Bootcamp\\Assignments\\MelbMotels\\client\\src\\index.js":"1","C:\\Users\\dzhan\\Desktop\\Coding_Bootcamp\\Assignments\\MelbMotels\\client\\src\\App.js":"2","C:\\Users\\dzhan\\Desktop\\Coding_Bootcamp\\Assignments\\MelbMotels\\client\\src\\components\\Navbar.js":"3","C:\\Users\\dzhan\\Desktop\\Coding_Bootcamp\\Assignments\\MelbMotels\\client\\src\\components\\Book.js":"4","C:\\Users\\dzhan\\Desktop\\Coding_Bootcamp\\Assignments\\MelbMotels\\client\\src\\components\\ThankYou.js":"5","C:\\Users\\dzhan\\Desktop\\Coding_Bootcamp\\Assignments\\MelbMotels\\client\\src\\components\\Home.js":"6","C:\\Users\\dzhan\\Desktop\\Coding_Bootcamp\\Assignments\\MelbMotels\\client\\src\\components\\Table.js":"7"},{"size":323,"mtime":1612159708000,"results":"8","hashOfConfig":"9"},{"size":529,"mtime":1612171812000,"results":"10","hashOfConfig":"9"},{"size":396,"mtime":1612159708000,"results":"11","hashOfConfig":"9"},{"size":15579,"mtime":1612177686713,"results":"12","hashOfConfig":"9"},{"size":501,"mtime":1612159708000,"results":"13","hashOfConfig":"9"},{"size":1173,"mtime":1612161076000,"results":"14","hashOfConfig":"9"},{"size":1366,"mtime":1612162576000,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1qm2scs",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\dzhan\\Desktop\\Coding_Bootcamp\\Assignments\\MelbMotels\\client\\src\\index.js",[],["34","35"],"C:\\Users\\dzhan\\Desktop\\Coding_Bootcamp\\Assignments\\MelbMotels\\client\\src\\App.js",[],"C:\\Users\\dzhan\\Desktop\\Coding_Bootcamp\\Assignments\\MelbMotels\\client\\src\\components\\Navbar.js",["36"],"import React from 'react'\r\n\r\nimport {Navbar, NavbarBrand} from \"reactstrap\"\r\n\r\nexport default props => {\r\n    return (\r\n        <div>\r\n            <Navbar color=\"light\" light expand=\"md\">\r\n            <NavbarBrand className=\"nav-brand\" onClick={ () => {\r\n                props.setPage(0)\r\n            }}></NavbarBrand>\r\n            PhoTastic\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","C:\\Users\\dzhan\\Desktop\\Coding_Bootcamp\\Assignments\\MelbMotels\\client\\src\\components\\Book.js",["37","38","39","40"],"import React, { useState, useEffect } from \"react\";\r\nimport DatePicker from 'react-datepicker';\r\nimport { registerLocale, setDefaultLocale } from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport au from 'date-fns/locale/en-AU';\r\nimport {\r\n  Row,\r\n  Col,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  Input,\r\n  Button\r\n} from \"reactstrap\";\r\n\r\nimport Table from \"./Table.js\";\r\nregisterLocale('en-AU', au)\r\n\r\nconst Book = props => {\r\n  const [totalTables, setTotalTables] = useState([]);\r\n  const [availableTables, setAvailableTables] = useState([]);\r\n\r\n  // User selection\r\n  const [selection, setSelection] = useState({\r\n    table: {\r\n      name: null,\r\n      id: null\r\n    },\r\n    date: new Date(),\r\n    time: null,\r\n    area: \"Select Area\",\r\n    size: 0\r\n  });\r\n\r\n  // User's booking details\r\n  const [booking, setBooking] = useState({\r\n    name: \"\",\r\n    phone: \"\",\r\n    email: \"\"\r\n  });\r\n\r\n  // List of potential areas\r\n  const [area] = useState([\"Any Area\", \"Outside\", \"Inside\", \"Bar\"]);\r\n  const [times] = useState([\r\n    \"12PM\",\r\n    \"1PM\",\r\n    \"2PM\",\r\n    \"3PM\",\r\n    \"4PM\",\r\n    \"5PM\",\r\n    \"6PM\",\r\n    \"7PM\",\r\n    \"8PM\",\r\n  ]);\r\n  // Verification of Reservation status\r\n  const [reservationError, setReservationError] = useState(false);\r\n\r\n  const getDate = () => {\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\"\r\n    ];\r\n    const date =\r\n      months[selection.date.getMonth()] +\r\n      \" \" +\r\n      selection.date.getDate() +\r\n      \" \" +\r\n      selection.date.getFullYear();\r\n    let time = selection.time.slice(0, -2);\r\n    time = selection.time > 12 ? time + 12 + \":00\" : time + \":00\";\r\n    console.log(time);\r\n    const datetime = new Date(date + \" \" + time);\r\n    return datetime;\r\n  };\r\n\r\n  const getEmptyTables = () => {\r\n    let tables = totalTables.filter(table => table.isAvailable);\r\n    return tables.length;\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   // Check availability of tables from our database when a given date and time is selected from dropdown\r\n  //   if (selection.time && selection.date) {\r\n  //     (async () => {\r\n  //       let datetime = getDate();\r\n  //       let res = await fetch(\"/booking\", {\r\n  //         method: \"POST\",\r\n  //         headers: {\r\n  //           \"Content-Type\": \"application/json\"\r\n  //         },\r\n  //         body: JSON.stringify({\r\n  //           date: datetime\r\n  //         })\r\n  //       });\r\n  //       res = await res.json();\r\n  //       // Filter available tables with area \r\n  //       let tables = res.tables.filter(\r\n  //         table =>\r\n  //           (selection.size > 0 ? table.capacity >= selection.size : true) &&\r\n  //           (selection.location !== \"Any Location\"\r\n  //             ? table.location === selection.location\r\n  //             : true)\r\n  //       );\r\n  //       setTotalTables(tables);\r\n  //     })();\r\n  //   }\r\n  // }, [selection.time, selection.date, selection.size, selection.location]);\r\n\r\n  const getAvailableTables = async () => {\r\n    console.log(selection);\r\n\r\n    let res = await fetch(\"/table/available\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        tableFilter: selection\r\n      })\r\n    });\r\n\r\n    setAvailableTables(await res.json());\r\n  };\r\n\r\n  const reserveTable = async (table) => {    \r\n    let res = await fetch(\"/reservation\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        name: booking.name,\r\n        phone: booking.phone,\r\n        email: booking.email,\r\n        tableDetails: table,\r\n        date: selection.date.toLocaleDateString(),\r\n        datetime: selection.date\r\n      })\r\n    });\r\n\r\n    console.log(await res.json());\r\n\r\n    // Redirect to confirmation screen with props\r\n    props.setPage(2);\r\n    \r\n  }\r\n\r\n  // Create reservation once details are filled out by User\r\n  const reserve = async () => {\r\n    if (\r\n      (booking.name.length === 0) |\r\n      (booking.phone.length === 0) |\r\n      (booking.email.length === 0)\r\n    ) {\r\n      console.log(\"Incomplete Details\");\r\n      setReservationError(true);\r\n    } else {\r\n      const datetime = getDate();\r\n      let res = await fetch(\"/reserve\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          ...booking,\r\n          date: datetime,\r\n          table: selection.table.id\r\n        })\r\n      });\r\n      res = await res.text();\r\n      console.log(\"Reserved: \" + res);\r\n      props.setPage(2);\r\n    }\r\n  };\r\n\r\n  // Select table creates state with ID and name\r\n  const selectTable = (table_name, table_id) => {\r\n    setSelection({\r\n      ...selection,\r\n      table: {\r\n        name: table_name,\r\n        id: table_id\r\n      }\r\n    });\r\n  };\r\n\r\n  // Party size dropdown\r\n  const getpartySize = () => {\r\n    let newSizes = [];\r\n\r\n    for (let i = 1; i < 8; i++) {\r\n      newSizes.push(\r\n        <DropdownItem\r\n          key={i}\r\n          className=\"booking-dropdown-menu\"\r\n          onClick={e => {\r\n            let newSel = {\r\n              ...selection,\r\n              table: {\r\n                ...selection.table\r\n              },\r\n              size: i\r\n            };\r\n            setSelection(newSel);\r\n          }}\r\n        >\r\n          {i}\r\n        </DropdownItem>\r\n      );\r\n    }\r\n    return newSizes;\r\n  };\r\n\r\n  // Generate area dropdown menu\r\n  const getArea = () => {\r\n    let newArea = [];\r\n    area.forEach(loc => {\r\n      newArea.push(\r\n        <DropdownItem\r\n          key={loc}\r\n          className=\"booking-dropdown-menu\"\r\n          onClick={_ => {\r\n            let newSel = {\r\n              ...selection,\r\n              table: {\r\n                ...selection.table\r\n              },\r\n              area: loc\r\n            };\r\n            setSelection(newSel);\r\n          }}\r\n        >\r\n          {loc}\r\n        </DropdownItem>\r\n      );\r\n    });\r\n    return newArea;\r\n  };\r\n\r\n  // Generate times dropdown menu\r\n  const getTimes = () => {\r\n    let newTimes = [];\r\n    times.forEach(time => {\r\n      newTimes.push(\r\n        <DropdownItem\r\n          key={time}\r\n          className=\"booking-dropdown-menu\"\r\n          onClick={_ => {\r\n            let newSel = {\r\n              ...selection,\r\n              table: {\r\n                ...selection.table\r\n              },\r\n              time: time\r\n            };\r\n            setSelection(newSel);\r\n          }}\r\n        >\r\n          {time}\r\n        </DropdownItem>\r\n      );\r\n    });\r\n    return newTimes;\r\n  };\r\n\r\n  // Generating tables from available tables\r\n  const getTables = () => {\r\n    console.log(\"Getting tables\");\r\n    if (getEmptyTables() > 0) {\r\n      let tables = [];\r\n      totalTables.forEach(table => {\r\n        if (table.isAvailable) {\r\n          tables.push(\r\n            <Table\r\n              key={table._id}\r\n              id={table._id}\r\n              chairs={table.capacity}\r\n              name={table.name}\r\n              empty\r\n              selectTable={selectTable}\r\n            />\r\n          );\r\n        } else {\r\n          tables.push(\r\n            <Table\r\n              key={table._id}\r\n              id={table._id}\r\n              chairs={table.capacity}\r\n              name={table.name}\r\n              selectTable={selectTable}\r\n            />\r\n          );\r\n        }\r\n      });\r\n      return tables;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row noGutters className=\"text-center align-items-center\">\r\n        <Col>\r\n          <p className=\"looking-for-pho\">\r\n            {!selection.table.id ? \"Book a Table\" : \"Confirm Reservation\"}\r\n            <i\r\n              className={\r\n                !selection.table.id\r\n                  ? \"fas fa-chair \"\r\n                  : \"fas fa-clipboard-check \"\r\n              }\r\n            ></i>\r\n          </p>\r\n          <p className=\"selected-table\">\r\n            {selection.table.id\r\n              ? \"You are booking table \" + selection.table.name\r\n              : null}\r\n          </p>\r\n\r\n          {reservationError ? (\r\n            <p className=\"reservation-error\">\r\n              * Please fill out all of the necessary details\r\n            </p>\r\n          ) : null}\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Available Tables */}\r\n      {\r\n        availableTables.length !== 0 ? (\r\n          availableTables.map(table => (\r\n            <div>\r\n              <h2>{ table.name }</h2>\r\n              <h3>Capacity: {table.capacity}</h3>\r\n              <Button\r\n                color=\"none\"\r\n                className=\"book-table-btn\"\r\n                onClick={_ => {\r\n                  reserveTable(table);\r\n                }}\r\n              >\r\n                Reserve Table\r\n                </Button>\r\n            </div>\r\n          ))\r\n        ) : (\r\n            <h1>Please enter details to find available tables</h1>\r\n        )\r\n      }\r\n\r\n      {!selection.table.id ? (\r\n        <div id=\"reservation-stuff\">\r\n          <Row noGutters className=\"text-center align-items-center\">\r\n            {/* <Col xs=\"12\" sm=\"3\">\r\n              <input\r\n                type=\"date\"\r\n                required=\"required\"\r\n                className=\"booking-dropdown\"\r\n                value={selection.date.toISOString().split(\"T\")[0]}\r\n                onChange={e => {\r\n                  if (!isNaN(new Date(new Date(e.target.value)))) {\r\n                    let newSel = {\r\n                      ...selection,\r\n                      table: {\r\n                        ...selection.table\r\n                      },\r\n                      date: new Date(e.target.value)\r\n                    };\r\n                    setSelection(newSel);\r\n                  } else {\r\n                    console.log(\"Invalid date\");\r\n                    let newSel = {\r\n                      ...selection,\r\n                      table: {\r\n                        ...selection.table\r\n                      },\r\n                      date: new Date()\r\n                    };\r\n                    setSelection(newSel);\r\n                  }\r\n                }}\r\n              ></input>\r\n            </Col> */}\r\n            <Col>\r\n              <DatePicker\r\n                selected={null}\r\n                onChange={date => setSelection({ ...selection, date})}\r\n                showTimeSelect\r\n                timeFormat=\"HH:mm\"\r\n                timeIntervals={15}\r\n                timeCaption=\"time\"\r\n                dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n              />\r\n            </Col>\r\n            <Col xs=\"12\" sm=\"3\">\r\n              <UncontrolledDropdown>\r\n                <DropdownToggle color=\"none\" caret className=\"booking-dropdown\">\r\n                  {selection.time === null ? \"Select a Time\" : selection.time}\r\n                </DropdownToggle>\r\n                <DropdownMenu right className=\"booking-dropdown-menu\">\r\n                  {getTimes()}\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n            </Col>\r\n            <Col xs=\"12\" sm=\"3\">\r\n              <UncontrolledDropdown>\r\n                <DropdownToggle color=\"none\" caret className=\"booking-dropdown\">\r\n                  {selection.area}\r\n                </DropdownToggle>\r\n                <DropdownMenu right className=\"booking-dropdown-menu\">\r\n                  {getArea()}\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n            </Col>\r\n            <Col xs=\"12\" sm=\"3\">\r\n              <UncontrolledDropdown>\r\n                <DropdownToggle color=\"none\" caret className=\"booking-dropdown\">\r\n                  {selection.size === 0\r\n                    ? \"Select a Party Size\"\r\n                    : selection.size.toString()}\r\n                </DropdownToggle>\r\n                <DropdownMenu right className=\"booking-dropdown-menu\">\r\n                  {getpartySize()}\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n            </Col>\r\n            <Col>\r\n              <Button\r\n                color=\"none\"\r\n                className=\"book-table-btn\"\r\n                onClick={_ => {\r\n                  getAvailableTables();\r\n                }}\r\n              >\r\n                Find Available Tables\r\n                </Button>\r\n            </Col>\r\n          </Row>\r\n          {/* <Row noGutters className=\"tables-display\">\r\n            <Col>\r\n              {availableTables > 0 ? (\r\n                <p className=\"available-tables\">{getEmptyTables()} available</p>\r\n              ) : null}\r\n\r\n              {selection.date && selection.time ? (\r\n                availableTables > 0 ? (\r\n                  <div>\r\n                    <div className=\"table-key\">\r\n                      <span className=\"empty-table\"></span> &nbsp; Available\r\n                        &nbsp;&nbsp;\r\n                        <span className=\"full-table\"></span> &nbsp; Unavailable\r\n                        &nbsp;&nbsp;\r\n                      </div>\r\n                    <Row noGutters>{getTables()}</Row>\r\n                  </div>\r\n                ) : (\r\n                    <p className=\"table-display-message\">No Available Tables</p>\r\n                  )\r\n              ) : (\r\n                  <p className=\"table-display-message\">\r\n                    Please select a date and time for your reservation.\r\n                  </p>\r\n                )}\r\n            </Col>\r\n          </Row> */}\r\n        </div>\r\n      ) : (\r\n          <div></div>\r\n        )}\r\n      <div id=\"confirm-reservation-stuff\">\r\n        <Row\r\n          noGutters\r\n          className=\"text-center justify-content-center reservation-details-container\"\r\n        >\r\n          <Col xs=\"12\" sm=\"3\" className=\"reservation-details\">\r\n            <Input\r\n              type=\"text\"\r\n              bsSize=\"lg\"\r\n              placeholder=\"Name\"\r\n              className=\"reservation-input\"\r\n              value={booking.name}\r\n              onChange={e => {\r\n                setBooking({\r\n                  ...booking,\r\n                  name: e.target.value\r\n                });\r\n              }}\r\n            />\r\n          </Col>\r\n          <Col xs=\"12\" sm=\"3\" className=\"reservation-details\">\r\n            <Input\r\n              type=\"text\"\r\n              bsSize=\"lg\"\r\n              placeholder=\"Phone Number\"\r\n              className=\"reservation-input\"\r\n              value={booking.phone}\r\n              onChange={e => {\r\n                setBooking({\r\n                  ...booking,\r\n                  phone: e.target.value\r\n                });\r\n              }}\r\n            />\r\n          </Col>\r\n          <Col xs=\"12\" sm=\"3\" className=\"reservation-details\">\r\n            <Input\r\n              type=\"text\"\r\n              bsSize=\"lg\"\r\n              placeholder=\"Email\"\r\n              className=\"reservation-input\"\r\n              value={booking.email}\r\n              onChange={e => {\r\n                setBooking({\r\n                  ...booking,\r\n                  email: e.target.value\r\n                });\r\n              }}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row noGutters className=\"text-center\">\r\n          <Col>\r\n            <Button\r\n              color=\"none\"\r\n              className=\"book-table-btn\"\r\n              onClick={_ => {\r\n                reserve();\r\n              }}\r\n            >\r\n              Book Now\r\n                </Button>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Book;","C:\\Users\\dzhan\\Desktop\\Coding_Bootcamp\\Assignments\\MelbMotels\\client\\src\\components\\ThankYou.js",["41"],"  \r\nimport React from \"react\";\r\nimport { Row, Col } from \"reactstrap\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <Row noGutters className=\"text-center\">\r\n        <Col>\r\n          <p className=\"thanks-header\">Thank You!</p>\r\n          <i className=\"fas fa-bacon thank-you-pho\"></i>\r\n          <p className=\"thanks-subtext\">\r\n            Please check your email to confirm your reservation, we look forward to seeing you!\r\n          </p>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};","C:\\Users\\dzhan\\Desktop\\Coding_Bootcamp\\Assignments\\MelbMotels\\client\\src\\components\\Home.js",[],"C:\\Users\\dzhan\\Desktop\\Coding_Bootcamp\\Assignments\\MelbMotels\\client\\src\\components\\Table.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":5,"column":1,"nodeType":"48","endLine":16,"endColumn":2},{"ruleId":"49","severity":1,"message":"50","line":1,"column":27,"nodeType":"51","messageId":"52","endLine":1,"endColumn":36},{"ruleId":"49","severity":1,"message":"53","line":3,"column":26,"nodeType":"51","messageId":"52","endLine":3,"endColumn":42},{"ruleId":"49","severity":1,"message":"54","line":21,"column":23,"nodeType":"51","messageId":"52","endLine":21,"endColumn":37},{"ruleId":"49","severity":1,"message":"55","line":278,"column":9,"nodeType":"51","messageId":"52","endLine":278,"endColumn":18},{"ruleId":"46","severity":1,"message":"47","line":5,"column":1,"nodeType":"48","endLine":19,"endColumn":3},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setDefaultLocale' is defined but never used.","'setTotalTables' is assigned a value but never used.","'getTables' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]